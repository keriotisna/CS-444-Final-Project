55350 Namespace(modelName='bigmodel5_DBN2_easyaugmentation', trainTransformID='easyaugmentation', valTestTransformID='NONE', epochs=200, warmupEpochs=5, batch_size=2048, lr=0.05, momentum=0.8, weight_decay=0.1, nesterov=True, plateuPatience=3, plateuFactor=0.5, saveResults=1)
SAVE_RESULTS: True
Got model: bigmodel5_DBN2
Using device: cuda
Test passed!
55350 Normalizing...
tensor([0.4267, 0.4193, 0.3908])
tensor([0.2264, 0.2232, 0.2174])
55350 Done normalizing!
55350 normalizedTrainTransform: Compose(
      RandomPerspective(p=0.5, distortion_scale=0.2, interpolation=InterpolationMode.BILINEAR, fill=0)
      RandomGrayscale(p=0.1)
      RandomRotation(degrees=[0.0, 15.0], interpolation=InterpolationMode.NEAREST, expand=False, fill=0)
      RandomHorizontalFlip(p=0.5)
      ColorJitter(brightness=(0.7, 1.3), contrast=(0.5, 1.5), saturation=(0.7, 1.3))
      Normalize(mean=[tensor(0.4267), tensor(0.4193), tensor(0.3908)], std=[tensor(0.2264), tensor(0.2232), tensor(0.2174)], inplace=False)
)
55350 normalizedValTestTransform: Compose(
      Identity()
      Normalize(mean=[tensor(0.4267), tensor(0.4193), tensor(0.3908)], std=[tensor(0.2264), tensor(0.2232), tensor(0.2174)], inplace=False)
)
55350 Starting training...

  0%|          | 0/200 [00:00<?, ?it/s]
  0%|          | 0/200 [01:53<?, ?it/s]
Traceback (most recent call last):
  File "C:\Users\Nicholas\Documents\GRADUATE OFFLINE\CS 444\CS-444-Final-Project\trainModel.py", line 178, in <module>
    main()
  File "C:\Users\Nicholas\Documents\GRADUATE OFFLINE\CS 444\CS-444-Final-Project\trainModel.py", line 171, in main
    trainableModel.train(PID=PID, SAVE_RESULTS=SAVE_RESULTS)
  File "C:\Users\Nicholas\Documents\GRADUATE OFFLINE\CS 444\CS-444-Final-Project\trainableModel.py", line 217, in train
    validationLoss, validationAccuracy = self.trainEpoch(dataloader=validationLoader, optimizer=optimizer, freezeModel=True)
  File "C:\Users\Nicholas\Documents\GRADUATE OFFLINE\CS 444\CS-444-Final-Project\trainableModel.py", line 149, in trainEpoch
    forwardPass = model.forward(x)
  File "C:\Users\Nicholas\anaconda3\envs\CS444Env\lib\site-packages\torch\nn\modules\container.py", line 215, in forward
    input = module(input)
  File "C:\Users\Nicholas\anaconda3\envs\CS444Env\lib\site-packages\torch\nn\modules\module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "C:\Users\Nicholas\anaconda3\envs\CS444Env\lib\site-packages\torch\nn\modules\module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
  File "C:\Users\Nicholas\Documents\GRADUATE OFFLINE\CS 444\CS-444-Final-Project\blocks.py", line 101, in forward
    y = layer(output)
  File "C:\Users\Nicholas\anaconda3\envs\CS444Env\lib\site-packages\torch\nn\modules\module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "C:\Users\Nicholas\anaconda3\envs\CS444Env\lib\site-packages\torch\nn\modules\module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
  File "C:\Users\Nicholas\Documents\GRADUATE OFFLINE\CS 444\CS-444-Final-Project\blocks.py", line 573, in forward
    decoded1 = self.decode1(decoded2)
  File "C:\Users\Nicholas\anaconda3\envs\CS444Env\lib\site-packages\torch\nn\modules\module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "C:\Users\Nicholas\anaconda3\envs\CS444Env\lib\site-packages\torch\nn\modules\module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
  File "C:\Users\Nicholas\anaconda3\envs\CS444Env\lib\site-packages\torch\nn\modules\container.py", line 215, in forward
    input = module(input)
  File "C:\Users\Nicholas\anaconda3\envs\CS444Env\lib\site-packages\torch\nn\modules\module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "C:\Users\Nicholas\anaconda3\envs\CS444Env\lib\site-packages\torch\nn\modules\module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
  File "C:\Users\Nicholas\anaconda3\envs\CS444Env\lib\site-packages\torch\nn\modules\batchnorm.py", line 171, in forward
    return F.batch_norm(
  File "C:\Users\Nicholas\anaconda3\envs\CS444Env\lib\site-packages\torch\nn\functional.py", line 2478, in batch_norm
    return torch.batch_norm(
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 64.00 MiB. GPU 0 has a total capacty of 8.00 GiB of which 0 bytes is free. Of the allocated memory 14.11 GiB is allocated by PyTorch, and 28.44 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
